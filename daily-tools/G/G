#!/usr/bin/env bash

# set -xeu

host='10.0.0.105'

declare -A repos
repos["light_exchange"]="git@git.xkool.org:chun/light_exchange.git"
repos["frontend"]="git@git.xkool.org:xkool/frontend.git"
repos["backend"]="git@git.xkool.org:xkool/backend.git"
repos["algorithm"]="git@git.xkool.org:xkool/algorithm.git"
repos["xkconfig"]="git@git.xkool.org:xkool/xkconfig.git"
repos["ppt_service"]="git@git.xkool.org:xkool/ppt_service.git"
repos["new_algorithm_residence"]="git@git.xkool.org:xkool/new_algorithm_residence.git"
repos["new_algorithm_point_candidate"]="git@git.xkool.org:xkool/new_algorithm_point_candidate.git"
repos["new_algorithm_measure"]="git@git.xkool.org:xkool/new_algorithm_measure.git"
repos["solar_algorithm"]="git@git.xkool.org:xkool/solar_algorithm.git"
repos["cad_processor"]="git@git.xkool.org:xkool/cad_processor.git"
repos["shapely_extension"]="git@git.xkool.org:weilong/shapely_extension.git"
repos["new_task_center"]="git@git.xkool.org:xkool/new_task_center.git"
repos["xkadmin"]="git@git.xkool.org:xkool/xkadmin.git"
repos["new_xkadmin"]="git@git.xkool.org:xkool/new_xkadmin.git"
repos["xk_monitor_backend"]="git@git.xkool.org:xkool/xk_monitor_backend.git"
repos["shapely_extension"]="git@git.xkool.org:weilong/shapely_extension.git"


function clone() {
    local dir="${1-.}"
    mkdir -p "${dir}"

    cd "$dir" || exit
    for repo in "${!repos[@]}"; do
        if git clone "${repos[${repo}]}" \
            "$repo" --recurse-submodules > /dev/null 2>&1; then
            echo "[$repo] done"
        else
            echo "[$repo] fail"
        fi
    done
}


function clean() {
    local dir=${1-.}
    cd "$dir" || exit

    for repo in "${!repos[@]}"; do
        if rm -rf "$repo"; then
            echo "[$repo] done"
        else
            echo "[$repo] fail"
        fi
    done
}

function pull(){
    local branch=${1-""}
    local remote_repo="origin"
    [ -z "$branch" ] && exit

    local dir=${2-.}
    cd "$dir" || exit

    for repo in "${!repos[@]}"; do (
        cd "$repo" > /dev/null 2>&1 || exit
        
        if [ -d '.git' ]; then
            if git pull "$remote_repo" "$branch"; then
                echo "[$repo] done"
            else
                echo "[$repo] fail"
            fi
            if [ -f '.gitmodules' ]; then
                sed  -n '/path/p' '.gitmoduels' \
                | cut -d ' ' -f 3 \
                | while read -r submodule; do (
                    cd "$submodule" > /dev/null 2>&1 || exit
                    if git pull "$remote_repo" "$branch"; then
                        echo "[$repo] done"
                    else
                        echo "[$repo] fail"
                    fi         
                )
                done
            fi
        fi
    )
    done
}

function checkout() { # abbreivation for shortcut
    local branch=${1-""}
    [ -z "$branch" ] && exit

    local dir=${2-.}
    cd "$dir" || exit

    for repo in "${!repos[@]}"; do (
        cd "$repo" > /dev/null 2>&1 || exit
        if [ -d '.git' ]; then
            if git checkout "$branch" -f > /dev/null 2>&1; then
                echo "[$repo] done"
            else
                echo "[$repo] fail"
            fi

            if [ -f '.gitmodules' ]; then
                sed -n '/path/p' '.gitmodules' \
                | cut -d ' ' -f 3 \
                | while read -r submodule; do (
                    cd "$submodule" > /dev/null 2>&1 || exit
                    if git checkout "$branch" -f > /dev/null 2>&1; then
                        echo "-[$submodule] done"
                    else
                        echo "-[$submodule] fail"
                    fi
                    )
                done
            fi
        fi
    )
    done
}

# function new_task_center_repo_handler() {

# }

function xkconfig_repo_handler() {
    local algorithm_port=$((8000 + ${1-0}))
    local backend_port=$((5000 + ${1-0}))
    local algorithm_edit_port=$((8088 + ${1-0}))
    local task_center_port=$((6705 + ${1-0}))
    # sed -i "/algorithm:/!b;n;c\ \ \ \ -\ http:\/\/10.0.0.105:${algorithm_port}" configs/config-linux.yaml
    # sed -i "/algorithm_edit:/!b;n;c\ \ \ \ -\ http:\/\/10.0.0.105:${algorithm_edit_port}" configs/config-linux.yaml
    # sed -i "/backend:/!b;n;c\ \ \ \ -\ http:\/\/10.0.0.105:${backend_port}" configs/config-linux.yaml
    # sed -i "/new_task_center:/!b;n;c\ \ \ \ -\ http:\/\/10.0.0.105" configs/config-linux.yaml
    sed -i -E "s/algorithm: [0-9]+/algorithm: ${algorithm_port}/" configs/config-linux.yaml
    sed -i -E "s/algorithm_edit: [0-9]+/algorithm_edit: ${algorithm_edit_port}/" configs/config-linux.yaml
    sed -i -E "s/new_task_center: [0-9]+/new_task_center: ${task_center_port}/" configs/config-linux.yaml
}

function frontend_repo_handler() {
    local frontend_port=$((${1-0} + 4200))
    if sed -n "/start:local_backend/p" package.json | grep -q "port"; then
        sed -i -E "/start:local_backend/s/--port *[0-9]+/--port ${frontend_port}/" package.json
    else
        sed -i -e "/start:local_backend/s/\",$/ --port ${frontend_port}\",/" package.json      
    fi
    if $?; then
        echo "[frontend] port change to ${frontend_port}"
    else
        echo "[frontend] changing fails"
        exit
    fi
    local backend_port=$((${1-0} + 5000))
    if sed -i -E "/apiUrl/c\  apiUrl:\'http:\/\/10.0.0.105:5000\'," src/environments/environment.local_backend.ts; then
        echo "[frontend] apiUrl change to ${backend_port}"
    else
        echo "[frontend] apiUrl changing fails"
    fi
}


function port() {
    local port_offset=${1-0}

    local dir=${2-.}
    cd "$dir" || exit

    for repo in "${!repos[@]}"; do (
        cd "$repo" > /dev/null 2>&1 || exit
        case $repo in
            # new_task_center)
            #     new_task_center_repo_handler "$port_offset"
            #     ;;
            xkconfig)
                xkconfig_repo_handler "$port_offset"
                ;;
            frontend)
                frontend_repo_handler "$port_offset"
                ;;
            *)
                ;;
        esac
    )
    done
}


function main() {
    case "$1" in
        clone)
            shift
            clone "$@"
            ;;
        clean)
            shift
            clean "$@"
            ;;
        co)
            shift
            checkout "$@"
            ;;
        pull)
            shift
            checkout "$@"
            ;;
        *)
            echo 'Unknown command'
    esac
}

main "$@"
